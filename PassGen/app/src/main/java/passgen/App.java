/*
 * This source file was generated by the Gradle 'init' task
 */
package passgen;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import java.security.SecureRandom;

public class App {
    public static void main(String[] args) throws Exception {
        boolean letters = true;
        boolean numbers = true;
        boolean sym = true;
        boolean newChars = true;
        String lettersChar = "";
        String numbersChar = "";
        String symChar = "";
        Scanner option = new Scanner(System.in);
        System.out.print("Input password length: ");
        int passLength = option.nextInt();

        String password[] = new String[passLength];
        
    	System.out.println("use letters? y/n");
        lettersChar = option.next();
        
        System.out.println("Use numbers? y/n");
        numbersChar = option.next();
        
        System.out.println("Use symbols? y/n");
        symChar = option.next();
        
        if (!(lettersChar.equalsIgnoreCase("y"))) {
            letters = false;
        } if (!(numbersChar.equalsIgnoreCase("y"))) {
            numbers = false;
        } if (!(symChar.equalsIgnoreCase("y"))) {
            sym = false;
        }
        
        if (letters == false && numbers == false && sym == false) {
            System.out.println("No options enabled; forcing alphanumerics");
            letters = true;
            numbers = true;
        }
        

        System.out.println(generatePassword(letters, numbers, sym, newChars, password));
        option.close();
    }
        
    private static String generatePassword(boolean letters, boolean numbers, boolean sym, boolean newChars, String[] password) throws Exception {
        String passphrase = "";
        int pull = -1;
        char dictionary[] = "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789~`!@#$%^&*()_+-={}[]:;|?/>.<,".toCharArray();
        char history[] = new char[4];
        SecureRandom bucket = new SecureRandom();
        System.out.println("Generating password...");
        TimeUnit.SECONDS.sleep(2);
        System.out.println("Importing Options...");
        TimeUnit.SECONDS.sleep(1);
        System.out.println("Using letters?:. . . . " + letters );
        TimeUnit.SECONDS.sleep(1);
        System.out.println("Using numbers?:. . . . " + numbers);
        TimeUnit.SECONDS.sleep(1);
        System.out.println("Using symbols?:. . . . " + sym);

        for(int i = 0; i < history.length; i++) {
            history[i] = dictionary[bucket.nextInt(0, 90)];
        }

        for (int i = 0; i <= password.length; i++) {
            pull = bucket.nextInt(0, 90);
            if (dictionary[pull] <= 51 && !letters) {
                pull = bucket.nextInt(52, 90);
            }
            if (!numbers && dictionary[pull] > 51 && dictionary[pull] < 62) {
                if (!letters) {
                    pull = bucket.nextInt(62, 90);
                } else {
                    do {
                        pull = bucket.nextInt(0, 91);
                    } while (pull < 62);
                }
            }
            if (dictionary[pull] >= 61 && !sym) {
                if (!numbers) {
                    pull = bucket.nextInt(0, 51);  
                } if (!letters) {
                    pull = bucket.nextInt(52, 61);
                } else {
                    pull = bucket.nextInt(0, 61);
                }
            }
            passphrase += dictionary[pull];
        }
        return passphrase;
    }
}